name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        neovim: [stable, nightly]
        exclude:
          - os: macos-latest
            neovim: nightly
          - os: windows-latest
            neovim: nightly
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: ${{ matrix.neovim }}

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ripgrep fd-find python3 nodejs npm
          npm install -g tree-sitter-cli

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ripgrep fd node
          npm install -g tree-sitter-cli

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ripgrep fd nodejs -y
          npm install -g tree-sitter-cli

      - name: Setup Configuration (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p ~/.config
          ln -sf $GITHUB_WORKSPACE ~/.config/nvim

      - name: Setup Configuration (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $configPath = "$env:LOCALAPPDATA\nvim"
          New-Item -ItemType Directory -Force -Path (Split-Path $configPath -Parent)
          New-Item -ItemType SymbolicLink -Path $configPath -Target $env:GITHUB_WORKSPACE -Force

      - name: Install Plugins
        timeout-minutes: 10
        shell: bash
        run: |
          # Install plugins with retries
          for i in {1..3}; do
            if nvim --headless -c "Lazy! sync" -c "qa"; then
              break
            fi
            echo "Plugin installation attempt $i failed, retrying..."
            sleep 5
          done

      - name: Test Configuration Loading
        shell: bash
        run: |
          nvim --headless -c "echo 'Config loaded successfully'" -c "qa"

      - name: Test Treesitter Installation
        timeout-minutes: 5
        shell: bash
        continue-on-error: true
        run: |
          nvim --headless -c "TSInstall lua" -c "qa"

      - name: Check Health
        shell: bash
        continue-on-error: true
        run: |
          nvim --headless -c "checkhealth" -c "qa" > health.log 2>&1 || true
          if [ -f health.log ]; then
            echo "Health check completed"
            head -100 health.log
          fi

      - name: Run Local Tests
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          if [ -f test/run_tests.sh ]; then
            chmod +x test/run_tests.sh
            ./test/run_tests.sh || true
          fi

      - name: Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-${{ matrix.os }}-${{ matrix.neovim }}
          path: health.log
          retention-days: 7
          if-no-files-found: ignore

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate JSON
        run: |
          if [ -f lazy-lock.json ]; then
            python3 -m json.tool lazy-lock.json > /dev/null
            echo "✓ lazy-lock.json is valid"
          else
            echo "! lazy-lock.json not found"
          fi

      - name: Check File Structure
        run: |
          required_files=(
            "init.lua"
            "lua/core/init.lua"
            "lua/core/plugins.lua"
            "lua/core/configs.lua"
            "lua/core/mappings.lua"
            "lua/core/colors.lua"
          )

          missing_files=()
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file is missing"
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Missing files: ${missing_files[*]}"
            exit 1
          fi

      - name: Install Lua Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.4 luarocks
          sudo luarocks install luacheck

      - name: Check Lua Syntax
        continue-on-error: true
        run: |
          # Create luacheck config
          cat > .luacheckrc << 'EOF'
          globals = { "vim", "_G" }
          read_globals = { "vim" }
          max_line_length = 120
          exclude_files = { ".git/*", "test/*" }
          EOF

          # Run luacheck
          luacheck lua/ init.lua --formatter plain || true

      - name: Check Code Quality
        run: |
          echo "Checking for common issues..."
          
          # Check for tabs vs spaces consistency
          if grep -r $'\t' --include="*.lua" .; then
            echo "⚠ Warning: Found tabs in Lua files. Consider using spaces for consistency."
          else
            echo "✓ No tabs found in Lua files"
          fi

          # Check for trailing whitespace
          if grep -r '[[:space:]]$' --include="*.lua" .; then
            echo "⚠ Warning: Found trailing whitespace in Lua files."
          else
            echo "✓ No trailing whitespace found"
          fi

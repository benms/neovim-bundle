name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        neovim: [stable]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: ${{ matrix.neovim }}

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ripgrep fd-find

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ripgrep fd

      - name: Setup Configuration
        run: |
          mkdir -p ~/.config
          ln -sf $GITHUB_WORKSPACE ~/.config/nvim

      - name: Install Plugins
        timeout-minutes: 5
        run: |
          nvim --headless -c "Lazy! sync" -c "qa" 2>&1 || true

      - name: Test Configuration Loading
        run: |
          nvim --headless -c "echo 'Config loaded successfully'" -c "qa"

      - name: Check Health
        continue-on-error: true
        run: |
          nvim --headless -c "checkhealth" -c "qa" > health.log 2>&1 || true

      - name: Upload Health Report
        if: always() && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health.log
          retention-days: 3
          if-no-files-found: ignore

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate JSON
        run: |
          if [ -f lazy-lock.json ]; then
            python3 -m json.tool lazy-lock.json > /dev/null
            echo "✓ lazy-lock.json is valid"
          fi

      - name: Check File Structure
        run: |
          required_files=(
            "init.lua"
            "lua/core/init.lua"
            "lua/core/plugins.lua"
          )

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file is missing"
              exit 1
            fi
          done
